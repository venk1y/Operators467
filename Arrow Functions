Arrow Functions:

>>Es6 version 
>>more readable and more structure
>>anonymous functions(lambda functions)
>>without function name but they are assigned to  variable

Example:
Arrow Functions without parameters

 let C=()=>{
    console.log("Hello Venky")
  }
  C()

Output: Hello Venky


Arrow Function with parameter

let x=(x,y)=>{
    console.log(x+y)
  }
  x(20,30)
  x(40,50)

Output:50
       90


Arrow Function with one argument
#without using parenthesis

let greet=x=>console.log(x);
  greet('hello')

Output:hello


Arrow function without argument

let greet=()=>console.log("hello")
greet()

Output:hello


Arrow function as an Expression

let age=18;
let welcome=(age<18)?
()=>console.log('hi venky'):
()=>console.log('hi Reddy');
welcome()

Output: hi Reddy

____Synchronous(If one task is completed then it will moves to the another task)

Example:
  function task1(){
  console.log("task1: Start")
}
task1()

Output:task1: start



function task2(){
  console.log("task2: Start")
}
task2()

Output:task2:start


function task3(){
  console.log("task3: Start")
}
task3()

Output:task3:start


____Asynchronous(multiple tasks at a time)

Example:


console.log("hi Venky");
setTimeout(()=>{
  console.log("Iam waiting")
},5000);
console.log("Iam in Lab")
console.log("Iam in College")


Output:hi Venky
 Iam in Lab
 Iam in College
 Iam waiting



CallBack:
         A callback is a function passed as an argument to another function

This technique allows a function to call another function 



function greet(name, callback){
  console.log(`Hello, ${name}!`);

  callback();
}
function sayGoodbye(){
  console.log("Goodbye")
}
greet("Venky", sayGoodbye);

Output:
Hello, Venky!
 Goodbye
Output:



